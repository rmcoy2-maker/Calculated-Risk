@st.cache_data(ttl=60)  # refresh every 60s on interactions
def load_edges() -> pd.DataFrame:
    from pathlib import Path
    import os, pandas as pd
    def _exports_dir():
        env = os.environ.get("EDGE_FINDER_ROOT")
        if env and (Path(env)/"exports").exists(): return Path(env)/"exports"
        if Path("exports").exists(): return Path("exports")
        return Path(".")

    exp = _exports_dir()
    # Prefer the normalized master, then common fallbacks
    for name in [
        "edges_master.csv",           # âœ… our canonical file
        "edges_graded_full.csv",
        "edges_graded_plus.csv",
        "edges_clean.csv",
        "edges_graded.csv",
        "edges.csv",
    ]:
        p = exp / name
        try:
            if p.exists() and p.stat().st_size > 0:
                df = pd.read_csv(p, low_memory=False, encoding="utf-8-sig")
                if not df.empty:
                    return df
        except Exception:
            pass
    return pd.DataFrame()

