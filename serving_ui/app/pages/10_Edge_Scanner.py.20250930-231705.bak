from __future__ import annotations
# === UltraImportGuard (parlay_ui & parlay_cart) ===
try:
    from app.utils.parlay_ui import selectable_odds_table
    from app.utils.parlay_cart import read_cart, add_to_cart, clear_cart
except Exception:
    import sys, types, importlib.util
    from pathlib import Path
    here = Path(__file__).resolve()

    def _find(path_tail: str):
        for up in (here,) + tuple(here.parents):
            cand = up / "serving_ui" / "app" / "utils" / path_tail
            if cand.exists():
                return up / "serving_ui", cand
        return None, None

    base_ui, ui_path   = _find("parlay_ui.py")
    base_ca, cart_path = _find("parlay_cart.py")
    base = base_ui or base_ca
    if not base:
        raise

    if str(base) not in sys.path:
        sys.path.insert(0, str(base))

    # ensure packages
    if "app" not in sys.modules:
        pkg_app = types.ModuleType("app"); pkg_app.__path__ = [str(base / "app")]; sys.modules["app"] = pkg_app
    if "app.utils" not in sys.modules:
        pkg_utils = types.ModuleType("app.utils"); pkg_utils.__path__ = [str(base / "app" / "utils")]; sys.modules["app.utils"] = pkg_utils

    # load modules by file and register under canonical names
    if ui_path:
        spec = importlib.util.spec_from_file_location("app.utils.parlay_ui", str(ui_path))
        mod = importlib.util.module_from_spec(spec); assert spec and spec.loader; spec.loader.exec_module(mod)  # type: ignore[attr-defined]
        sys.modules["app.utils.parlay_ui"] = mod
        selectable_odds_table = mod.selectable_odds_table
    if cart_path:
        spec2 = importlib.util.spec_from_file_location("app.utils.parlay_cart", str(cart_path))
        mod2 = importlib.util.module_from_spec(spec2); assert spec2 and spec2.loader; spec2.loader.exec_module(mod2)  # type: ignore[attr-defined]
        sys.modules["app.utils.parlay_cart"] = mod2
        read_cart      = getattr(mod2, "read_cart")
        add_to_cart    = getattr(mod2, "add_to_cart")
        clear_cart     = getattr(mod2, "clear_cart")
# === /UltraImportGuard ===

# === AccessImportGuard ===
try:
    from app.lib.access import require_allowed_page, beta_banner, live_enabled  # type: ignore
except ModuleNotFoundError:
    import sys
    from pathlib import Path
    _here = Path(__file__).resolve()
    for up in (_here,) + tuple(_here.parents):
        cand = up / "serving_ui" / "app" / "lib" / "access.py"
        if cand.exists():
            base = str((up / "serving_ui").resolve())
            if base not in sys.path:
                sys.path.insert(0, base)
            break
    try:
        from app.lib.access import require_allowed_page, beta_banner, live_enabled  # type: ignore
    except Exception:
        def live_enabled() -> bool: return False
        def require_allowed_page(_page_path: str) -> None: return None
        def beta_banner() -> None:
            try:
                import streamlit as st
                st.caption("ðŸ§ª Beta mode â€” access module missing; using shim.")
            except Exception:
                pass
# === /AccessImportGuard ===

# === UltraImportGuard (parlay_ui) ===
try:
    from app.utils.parlay_ui import selectable_odds_table
except Exception:
    import sys, types, importlib.util
    from pathlib import Path
    here = Path(__file__).resolve()
    base = path = None
    for up in (here,) + tuple(here.parents):
        cand = up / "serving_ui" / "app" / "utils" / "parlay_ui.py"
        if cand.exists():
            base, path = up / "serving_ui", cand
            break
    if not base or not path:
        raise
    if str(base) not in sys.path:
        sys.path.insert(0, str(base))
    if "app" not in sys.modules:
        pkg_app = types.ModuleType("app")
        pkg_app.__path__ = [str(base / "app")]
        sys.modules["app"] = pkg_app
    if "app.utils" not in sys.modules:
        pkg_utils = types.ModuleType("app.utils")
        pkg_utils.__path__ = [str(base / "app" / "utils")]
        sys.modules["app.utils"] = pkg_utils
    spec = importlib.util.spec_from_file_location("app.utils.parlay_ui", str(path))
    mod = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]
    assert spec and spec.loader
    spec.loader.exec_module(mod)  # type: ignore[attr-defined]
    sys.modules["app.utils.parlay_ui"] = mod
    selectable_odds_table = mod.selectable_odds_table
# === /UltraImportGuard ===

# === AppImportGuard (auth) ===
try:
    from app.lib.auth import login, show_logout
except ModuleNotFoundError:
    import sys, types, importlib.util
    from pathlib import Path
    here = Path(__file__).resolve()
    base = auth_path = None
    for p in (here,) + tuple(here.parents):
        c1 = p / "serving_ui" / "app" / "lib" / "auth.py"
        if c1.exists():
            base, auth_path = p / "serving_ui", c1
            break
        c2 = p / "app" / "lib" / "auth.py"
        if c2.exists():
            base, auth_path = p, c2
            break
    if not base or not auth_path:
        raise
    if str(base) not in sys.path:
        sys.path.insert(0, str(base))
    try:
        from app.lib.auth import login, show_logout  # type: ignore
    except ModuleNotFoundError:
        if "app" not in sys.modules:
            pkg_app = types.ModuleType("app")
            pkg_app.__path__ = [str(base / "app")]
            sys.modules["app"] = pkg_app
        if "app.lib" not in sys.modules:
            pkg_lib = types.ModuleType("app.lib")
            pkg_lib.__path__ = [str(base / "app" / "lib")]
            sys.modules["app.lib"] = pkg_lib
        spec = importlib.util.spec_from_file_location("app.lib.auth", str(auth_path))
        mod = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]
        assert spec and spec.loader
        spec.loader.exec_module(mod)  # type: ignore[attr-defined]
        sys.modules["app.lib.auth"] = mod
        login, show_logout = mod.login, mod.show_logout
# === /AppImportGuard ===

# === Path bootstrap & refresh shim ===
import sys
from pathlib import Path
_HERE = Path(__file__).resolve()
_SERVING_UI = _HERE.parents[2]
if str(_SERVING_UI) not in sys.path:
    sys.path.insert(0, str(_SERVING_UI))
try:
    if live_enabled():
        try:
            from app.lib.access import do_expensive_refresh
        except Exception:
            def do_expensive_refresh(): return None
        do_expensive_refresh()
except Exception:
    pass
# === /Path bootstrap & refresh shim ===

import streamlit as st
st.set_page_config(page_title='10 Edge Scanner', page_icon='ðŸ“ˆ', layout='wide')



# === Nudge (auto-injected) ===
try:
    from app.utils.nudge import bump_usage, show_nudge  # type: ignore
except Exception:
    bump_usage = lambda *a, **k: None
    def show_nudge(*a, **k): pass

# Count a lightweight interaction per page load
bump_usage("page_visit")

# Show a nudge once usage crosses threshold in the last 24h
show_nudge(feature="analytics", metric="page_visit", threshold=10, period="1D", demo_unlock=True, location="inline")
# === /Nudge (auto-injected) ===

# -------------- PAGE BODY --------------
require_allowed_page('pages/10_Edge_Scanner.py')
beta_banner()

import os, numpy as np, pandas as pd
from pathlib import Path

try:
    from app.utils.diagnostics import mount_in_sidebar
except Exception:
    def mount_in_sidebar(page_name: str): return None

from app.utils.parlay_cart import read_cart, clear_cart

PAGE_PROTECTED = False
auth = login(required=PAGE_PROTECTED)
if not auth.ok: st.stop()
show_logout()
auth = login(required=False)
if not auth.authenticated: st.info('You are in read-only mode.')
show_logout()

TZ = 'America/New_York'

def _exports_dir() -> Path:
    env = os.environ.get('EDGE_EXPORTS_DIR', '').strip()
    if env:
        p = Path(env); p.mkdir(parents=True, exist_ok=True); return p
    here = Path(__file__).resolve()
    for up in [here.parent] + list(here.parents):
        if up.name.lower() == 'edge-finder':
            p = up / 'exports'; p.mkdir(parents=True, exist_ok=True); return p
    p = Path.cwd() / 'exports'; p.mkdir(parents=True, exist_ok=True); return p

def _age_str(p: Path) -> str:
    try:
        secs = int(Path(p).stat().st_mtime)
        return 'n/a'
    except Exception:
        return 'n/a'

def american_to_prob(o):
    if pd.isna(o): return np.nan
    o = float(o)
    return 100.0 / (o + 100.0) if o > 0 else abs(o) / (abs(o) + 100.0) if o < 0 else np.nan

def american_to_payout(o):
    if pd.isna(o): return np.nan
    o = float(o)
    return o / 100.0 if o > 0 else 100.0 / abs(o)

def _latest_csv(paths: list[Path]) -> Path | None:
    paths = [p for p in paths if p and p.exists()]
    return max(paths, key=lambda p: p.stat().st_mtime) if paths else None

@st.cache_data(ttl=60)
def load_edges() -> tuple[pd.DataFrame, Path]:
    exp = _exports_dir()
    names = ['edges_standardized.csv', 'edges_graded_full_normalized_std.csv', 'edges_graded_full.csv', 'edges_normalized.csv', 'edges_master.csv']
    paths = [exp / n for n in names]
    p = _latest_csv(paths) or paths[0]
    df = pd.read_csv(p, low_memory=False, encoding='utf-8-sig') if p.exists() else pd.DataFrame()
    return (df, p)

diag = mount_in_sidebar('10_Edge_Scanner')
st.title('Edge Scanner')

edges, edges_p = load_edges()
st.caption(f'Edges: `{edges_p}` Â· rows={len(edges):,}')
if edges.empty: st.stop()

odds = pd.to_numeric(edges.get('odds', edges.get('price', pd.Series(index=edges.index))), errors='coerce')
pwin = pd.to_numeric(edges.get('p_win', pd.Series(index=edges.index)), errors='coerce')
pwin = pwin.where(pwin.notna(), odds.map(american_to_prob))

edges = edges.copy()
edges['odds'] = odds
edges['p_win'] = pwin
edges['_payout_per_$1'] = odds.map(american_to_payout)
edges['ev/$1'] = edges['p_win'] * edges['_payout_per_$1'] - (1 - edges['p_win'])

left, right = st.columns(2)
with left:
    min_ev = st.slider('Min EV (per $1)', 0.0, 1.0, 0.0, 0.05)
with right:
    min_p = st.slider('Min p_win (implied)', 0.0, 1.0, 0.45, 0.01)

flt = (edges['ev/$1'].fillna(-9) >= min_ev) & (edges['p_win'].fillna(0) >= min_p)
view = edges.loc[flt].copy()
cols = [c for c in ['game_id', 'market', 'side', 'book', 'odds', 'p_win', 'ev/$1'] if c in view.columns]

st.dataframe(view[cols].reset_index(drop=True), height=520, width='stretch')
st.caption(f'Rows after filters: {len(view):,}')
st.download_button('Download filtered edges.csv', view[cols].to_csv(index=False).encode('utf-8'), file_name='edges_live_filtered.csv', mime='text/csv')

try:
    if 'edges' in globals() and isinstance(edges, pd.DataFrame):
        selectable_odds_table(edges, page_key='edge_scanner', page_name='10_Edge_Scanner')
except Exception:
    pass

