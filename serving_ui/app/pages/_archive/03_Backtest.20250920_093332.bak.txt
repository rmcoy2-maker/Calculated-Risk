from __future__ import annotations
# === AppImportGuard (robust) ===
try:
    from app.lib.auth import login, show_logout
except ModuleNotFoundError:
    import sys
    from pathlib import Path
    here = Path(__file__).resolve()
    su = None
    for p in [here] + list(here.parents):
        if (p / "serving_ui" / "app" / "__init__.py").exists():
            su = (p / "serving_ui")
            break
        if p.name == "serving_ui" and (p / "app" / "__init__.py").exists():
            su = p
            break
        if p.name == "app" and p.parent.name == "serving_ui" and (p / "__init__.py").exists():
            su = p.parent
            break
    if su and (s := str(su)) not in sys.path:
        sys.path.insert(0, s)
    from app.lib.auth import login, show_logout  # type: ignore
# === /AppImportGuard ===
import streamlit as st
from app.lib.auth import login, show_logout
# === Auth (auto-injected) ===
import streamlit as st  # ensured
from app.lib.auth import login, show_logout

auth = login(required=False)   # or required=True for protected pages
if not auth.authenticated:
    st.info("You are in read-only mode.")
show_logout()  # sidebar logout
# === /Auth (auto-injected) ===
import streamlit as st

import streamlit as st
try:
except Exception:
    pass
st.markdown("""
<style>
  .block-container { max-width: none !important; padding-left: 1rem; padding-right: 1rem; }
  [data-testid="stHeader"] { z-index: 9990; }
</style>
""", unsafe_allow_html=True)
st.markdown("""
<style>
  .block-container {max-width: 1600px; padding-top: 0.5rem; padding-left: 1.0rem; padding-right: 1.0rem;}
</style>
""", unsafe_allow_html=True)

# --- auto-added: newest-first patch ---
try:
    import streamlit as st  # ensure alias available
except Exception:
    import streamlit as st
from app.utils.newest_first_patch import apply_newest_first_patch as __nfp_apply
__nfp_apply(st)
# --- end auto-added ---









