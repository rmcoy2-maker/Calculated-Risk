from __future__ import annotations

import streamlit as st
try:
except Exception:
    pass
st.markdown("""
<style>
  .block-container { max-width: none !important; padding-left: 1rem; padding-right: 1rem; }
  [data-testid="stHeader"] { z-index: 9990; }
</style>
""", unsafe_allow_html=True)
# --- auto-added: newest-first patch ---
try:
    # Preferred absolute import (when 'app' is a proper package)
    from app.utils.newest_first_patch import apply_newest_first_patch as __nfp_apply
except Exception:
    try:
        # Fallback if pages are executed such that relative path works
        from utils.newest_first_patch import apply_newest_first_patch as __nfp_apply
    except Exception:
        # Final no-op guard
        def __nfp_apply(_): 
            return
import streamlit as st  # ensure alias available
__nfp_apply(st)
# --- end auto-added ---
from app.bootstrap import bootstrap_paths; bootstrap_paths()
import sys as _sys
from pathlib import Path as _Path
try:
    _ROOT = _Path(__file__).resolve().parents[2]   # .../serving_ui/app
    _REPO = _ROOT.parents[1]
    if str(_REPO) not in _sys.path:
        _sys.path.insert(0, str(_REPO))
except Exception:
    pass
import pandas as pd
import streamlit as st
from pathlib import Path

ROOT = Path(__file__).resolve().parents[2]
EXPORTS = ROOT / "exports"

st.header("Diagnostics")
st.write("Repo root:", ROOT)
st.write("Exports dir:", EXPORTS)

files = ["bets_log.csv", "parlays.csv", "edges.csv"]
for name in files:
    p = EXPORTS / name
    st.subheader(name)
    st.write("Exists:", p.exists(), " Size:", (p.stat().st_size if p.exists() else 0))
    if p.exists() and p.stat().st_size > 0:
        try:
            df = pd.read_csv(p, nrows=3)
            st.dataframe(df, use_container_width=True)
        except Exception as e:
            st.warning(f"Could not read: {e}")

# === end boot ===# app/pages/99_Diagnostics.py
# Robust diagnostics page for Edge Finder

import sys, platform, json
from pathlib import Path
import streamlit as st
st.title("ü©∫ Diagnostics")

# -----------------------------------------------------------------------------
# Environment info
# -----------------------------------------------------------------------------
st.subheader("Environment")
st.write({
    "Python version": sys.version,
    "Platform": platform.platform(),
    "Executable": sys.executable,
    "Working dir": str(Path.cwd()),
    "Sys.path[0]": sys.path[0],
})

# -----------------------------------------------------------------------------
# Package versions
# -----------------------------------------------------------------------------
st.subheader("Packages")
pkgs = {}
for name in ["streamlit", "pandas", "numpy", "matplotlib", "scikit_learn"]:
    try:
        mod = __import__(name.replace("-", "_"))
        pkgs[name] = getattr(mod, "__version__", "unknown")
    except Exception as e:
        pkgs[name] = f"missing ({e})"
st.json(pkgs)

# -----------------------------------------------------------------------------
# Matplotlib test chart
# -----------------------------------------------------------------------------
st.subheader("Matplotlib Test")
try:
    import matplotlib.pyplot as plt
    import numpy as np

    x = np.linspace(0, 2*np.pi, 200)
    y = np.sin(x)

    fig, ax = plt.subplots()
    ax.plot(x, y, label="sin(x)")
    ax.set_title("Matplotlib test plot")
    ax.legend()
    st.pyplot(fig)
except Exception as e:
    st.error(f"Matplotlib failed: {e}")

# -----------------------------------------------------------------------------
# Project file health
# -----------------------------------------------------------------------------
st.subheader("Project Files")

REPO_ROOT = Path(__file__).resolve().parents[2]
exports = REPO_ROOT / "exports"
files = {
    "bets_log.csv": exports / "bets_log.csv",
    "parlays.csv":  exports / "parlays.csv",
    "bankroll.csv": exports / "bankroll.csv",
    "edges.csv":    exports / "edges.csv",
    "settled.csv":  exports / "settled.csv",
}

import pandas as pd

for label, path in files.items():
    if not path.exists():
        st.warning(f"‚ùå {label} not found at {path}")
        continue
    try:
        df = pd.read_csv(path)
        st.success(f"‚úÖ {label}: {len(df)} rows, {len(df.columns)} cols")
        st.dataframe(df.head(5), use_container_width=True, hide_index=True)
    except Exception as e:
        st.error(f"‚ö†Ô∏è {label} exists but failed to read: {e}")

# -----------------------------------------------------------------------------
# Session state
# -----------------------------------------------------------------------------
st.subheader("Streamlit Session State")
if st.session_state:
    st.json({k: str(v) for k,v in st.session_state.items()})
else:
    st.info("Session state is empty.")













