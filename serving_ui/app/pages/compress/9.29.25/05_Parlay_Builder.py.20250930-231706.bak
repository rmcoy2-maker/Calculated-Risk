from __future__ import annotations
# === AppImportGuard (nuclear) ===
try:
    from app.lib.auth import login, show_logout
except ModuleNotFoundError:
    import sys
    from pathlib import Path
    here = Path(__file__).resolve()

    base = None
    auth_path = None
    for p in [here] + list(here.parents):
        cand1 = p / "app" / "lib" / "auth.py"
        cand2 = p / "serving_ui" / "app" / "lib" / "auth.py"
        if cand1.exists():
            base, auth_path = p, cand1
            break
        if cand2.exists():
            base, auth_path = (p / "serving_ui"), cand2
            break

    if base and auth_path:
        s = str(base)
        if s not in sys.path:
            sys.path.insert(0, s)
        try:
            from app.lib.auth import login, show_logout  # type: ignore
        except ModuleNotFoundError:
            import types, importlib.util
            if "app" not in sys.modules:
                pkg_app = types.ModuleType("app")
                pkg_app.__path__ = [str(Path(base) / "app")]
                sys.modules["app"] = pkg_app
            if "app.lib" not in sys.modules:
                pkg_lib = types.ModuleType("app.lib")
                pkg_lib.__path__ = [str(Path(base) / "app" / "lib")]
                sys.modules["app.lib"] = pkg_lib
            spec = importlib.util.spec_from_file_location("app.lib.auth", str(auth_path))
            mod = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]
            assert spec and spec.loader
            spec.loader.exec_module(mod)  # type: ignore[attr-defined]
            sys.modules["app.lib.auth"] = mod
            login = mod.login
            show_logout = mod.show_logout
    else:
        raise
# === /AppImportGuard ===


import sys
from pathlib import Path
import streamlit as st
_here = Path(__file__).resolve()
for up in [_here] + list(_here.parents):
    cand = up / 'serving_ui' / 'app' / '__init__.py'
    if cand.exists():
        base = str((up / 'serving_ui').resolve())
        if base not in sys.path:
            sys.path.insert(0, base)
        break
PAGE_PROTECTED = False
auth = login(required=PAGE_PROTECTED)
if not auth.ok:
    st.stop()
show_logout()
auth = login(required=False)
if not auth.authenticated:
    st.info('You are in read-only mode.')
show_logout()
import sys, os
from pathlib import Path
_HERE = Path(__file__).resolve()
_SERVING_UI = _HERE.parents[2]
if str(_SERVING_UI) not in sys.path:
    sys.path.insert(0, str(_SERVING_UI))
from app.lib.access import live_enabled
if live_enabled():
    do_expensive_refresh()
else:
    pass
st.set_page_config(page_title='Parlay Builder', page_icon='ðŸ§±', layout='wide')


# === Nudge (auto-injected) ===
try:
    from app.utils.nudge import bump_usage, show_nudge  # type: ignore
except Exception:
    bump_usage = lambda *a, **k: None
    def show_nudge(*a, **k): pass

# Count a lightweight interaction per page load
bump_usage("page_visit")

# Show a nudge once usage crosses threshold in the last 24h
show_nudge(feature="analytics", metric="page_visit", threshold=10, period="1D", demo_unlock=True, location="inline")
# === /Nudge (auto-injected) ===

import os, time, math
from pathlib import Path
from typing import List, Optional, Dict
import numpy as np
import pandas as pd
from app.utils.parlay_ui import selectable_odds_table
from app.utils.parlay_cart import read_cart, clear_cart
try:
    from app.utils.diagnostics import mount_in_sidebar
except ModuleNotFoundError:
    try:
        import sys
        from pathlib import Path as _efP
        sys.path.append(str(_efP(__file__).resolve().parents[3]))
        from app.utils.diagnostics import mount_in_sidebar
    except Exception:
        try:
            from utils.diagnostics import mount_in_sidebar
        except Exception:

            def mount_in_sidebar(page_name: str):
                return None
TZ = 'America/New_York'

def _exports_dir() -> Path:
    env = os.environ.get('EDGE_EXPORTS_DIR', '').strip()
    if env:
        p = Path(env)
        p.mkdir(parents=True, exist_ok=True)
        return p
    here = Path(__file__).resolve()
    for up in [here.parent] + list(here.parents):
        if up.name.lower() == 'edge-finder':
            p = up / 'exports'
            p.mkdir(parents=True, exist_ok=True)
            return p
    p = Path.cwd() / 'exports'
    p.mkdir(parents=True, exist_ok=True)
    return p

def _age_str(p: Path) -> str:
    try:
        secs = int(time.time() - p.stat().st_mtime)
        return f'{secs}s' if secs < 60 else f'{secs // 60}m'
    except Exception:
        return 'n/a'
_ALIAS = {'REDSKINS': 'COMMANDERS', 'WASHINGTON': 'COMMANDERS', 'FOOTBALL': 'COMMANDERS', 'OAKLAND': 'RAIDERS', 'LV': 'RAIDERS', 'LAS': 'RAIDERS', 'VEGAS': 'RAIDERS', 'SD': 'CHARGERS', 'STL': 'RAMS'}

def _nickify(series: pd.Series) -> pd.Series:
    s = series.astype('string').fillna('').str.upper()
    s = s.str.replace('[^A-Z0-9 ]+', '', regex=True).str.strip().replace(_ALIAS)
    return s.str.replace('\\s+', '_', regex=True)

def _best_col(df: pd.DataFrame, candidates: List[str]) -> Optional[str]:
    low = {c.lower(): c for c in df.columns}
    for c in candidates:
        if c.lower() in low:
            return low[c.lower()]
    return None

def _ensure_nicks(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty:
        return df
    home_c = _best_col(df, ['_home_nick', 'home_nick', 'home', 'home_team', 'Home', 'HOME', 'team_home'])
    away_c = _best_col(df, ['_away_nick', 'away_nick', 'away', 'away_team', 'Away', 'AWAY', 'team_away'])
    if home_c is None:
        df['_home_nick'] = pd.Series([''] * len(df), dtype='string')
    else:
        df['_home_nick'] = _nickify(df[home_c].astype('string'))
    if away_c is None:
        df['_away_nick'] = pd.Series([''] * len(df), dtype='string')
    else:
        df['_away_nick'] = _nickify(df[away_c].astype('string'))
    return df

def _norm_market(m) -> str:
    m = (str(m) or '').strip().lower()
    if m in {'h2h', 'ml', 'moneyline', 'money line'}:
        return 'H2H'
    if m.startswith('spread') or m in {'spread', 'spreads'}:
        return 'SPREADS'
    if m.startswith('total') or m in {'total', 'totals'}:
        return 'TOTALS'
    return m.upper()

def _odds_to_decimal(o: pd.Series) -> pd.Series:
    o = pd.to_numeric(o, errors='coerce')
    return np.where(o > 0, 1 + o / 100.0, np.where(o < 0, 1 + 100.0 / np.abs(o), np.nan))

def _ensure_date_iso(df: pd.DataFrame, candidates: List[str]) -> pd.DataFrame:
    if len(df) == 0:
        return df
    for c in candidates:
        if c in df.columns:
            s = pd.to_datetime(df[c], errors='coerce', utc=True)
            df['_date_iso'] = s.dt.tz_convert(TZ).dt.strftime('%Y-%m-%d')
            break
    if '_date_iso' not in df.columns:
        df['_date_iso'] = pd.Series(pd.NA, index=df.index, dtype='string')
    return df

def latest_batch(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return df
    for col in ['_snapshot_ts_utc', 'snapshot_ts_utc', 'snapshot_ts', '_ts', 'ts']:
        if col in df.columns:
            ts = pd.to_datetime(df[col], errors='coerce', utc=True)
            last = ts.max()
            return df[ts == last].copy()
    return df

def within_next_week(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return df
    if '_date_iso' not in df.columns:
        return df
    d = pd.to_datetime(df['_date_iso'], errors='coerce', utc=True).dt.tz_convert(TZ)
    today = pd.Timestamp.now(tz=TZ).normalize()
    end = today + pd.Timedelta(days=7)
    return df[(d >= today) & (d <= end)].copy()

def refresh_button(key: Optional[str]=None):
    if st.button('ðŸ”„ Refresh data', key=key or f'refresh_{__name__}'):
        try:
            st.cache_data.clear()
        except Exception:
            pass
        st.rerun()

def _latest_csv(paths: list[Path]) -> Optional[Path]:
    paths = [p for p in paths if p and p.exists()]
    if not paths:
        return None
    return max(paths, key=lambda p: p.stat().st_mtime)

@st.cache_data(ttl=60)
def load_live() -> tuple[pd.DataFrame, Path]:
    exp = _exports_dir()
    cand = [exp / 'lines_live.csv', exp / 'lines_live_latest.csv']
    p = _latest_csv(cand) or cand[0]
    df = pd.read_csv(p, low_memory=False, encoding='utf-8-sig') if p.exists() else pd.DataFrame()
    return (df, p)

@st.cache_data(ttl=60)
def load_open_close() -> tuple[pd.DataFrame, Path]:
    exp = _exports_dir()
    cand = [exp / 'lines_open_close.csv', exp / 'lines_open_close_latest.csv']
    p = _latest_csv(cand) or cand[0]
    df = pd.read_csv(p, low_memory=False, encoding='utf-8-sig') if p.exists() else pd.DataFrame()
    return (df, p)

@st.cache_data(ttl=60)
def load_edges() -> tuple[pd.DataFrame, Path]:
    exp = _exports_dir()
    names = ['edges_standardized.csv', 'edges_graded_full_normalized_std.csv', 'edges_graded_full.csv', 'edges_normalized.csv', 'edges_master.csv']
    paths = [exp / n for n in names]
    p = _latest_csv(paths) or paths[0]
    df = pd.read_csv(p, low_memory=False, encoding='utf-8-sig') if p.exists() else pd.DataFrame()
    return (df, p)
diag = mount_in_sidebar('05_Parlay_Builder')
st.title('Parlay Builder â€” Your / House / Computer')
refresh_button(key='refresh_05_parlay')
edges, edges_p = load_edges()
live, live_p = load_live()
st.caption(f'Edges: `{edges_p}` Â· Live: `{live_p}`')
live = within_next_week(latest_batch(_ensure_date_iso(live, ['_date_iso', 'event_date', 'commence_time', 'date', 'game_date', 'Date'])))
edges = within_next_week(_ensure_date_iso(edges, ['_date_iso', 'date', 'game_date', '_key_date', 'Date']))
for df in (edges, live):
    df['_market_norm'] = df.get('_market_norm', df.get('market', pd.Series(index=df.index))).map(_norm_market)
    if '_ev_per_$1' not in df.columns:
        o = pd.to_numeric(df.get('price', pd.Series(index=df.index)), errors='coerce')
        p = pd.to_numeric(df.get('p_win', pd.Series(index=df.index)), errors='coerce').clip(0, 1)
        dec = np.where(o > 0, 1 + o / 100.0, np.where(o < 0, 1 + 100.0 / np.abs(o), np.nan))
        df['_ev_per_$1'] = p * (dec - 1) - (1 - p)
st.sidebar.header('Parlay Options')
min_legs = 3
max_legs = 10
legs = st.sidebar.slider('Number of legs', min_value=min_legs, max_value=max_legs, value=5)
avoid_same_game = st.sidebar.checkbox('Avoid same game/market', value=True)
market_pick = st.sidebar.multiselect('Markets', options=['H2H', 'SPREADS', 'TOTALS'], default=[])

def _filter(df):
    out = df.copy()
    if market_pick:
        out = out[out['_market_norm'].isin(market_pick)]
    return out

def _american_to_decimal(odds):
    o = pd.to_numeric(odds, errors='coerce')
    return pd.Series(np.where(o > 0, 1 + o / 100.0, np.where(o < 0, 1 + 100.0 / np.abs(o), np.nan)), index=getattr(odds, 'index', None))

def _suggest_computer(df: pd.DataFrame, max_legs: int=5) -> pd.DataFrame:
    dd = df.copy()
    sort_cols = ['_ev_per_$1'] if '_ev_per_$1' in dd.columns else ['p_win'] if 'p_win' in dd.columns else ['price']
    dd = dd.sort_values(sort_cols, ascending=[False] * len(sort_cols))
    km = [c for c in ['_date_iso', '_away_nick', '_home_nick', '_market_norm'] if c in dd.columns]
    if km:
        dd = dd.drop_duplicates(km)
    return dd.head(max_legs)
pool = _filter(edges if not edges.empty else live).copy()
display_cols = [c for c in ['_date_iso', '_away_nick', '_home_nick', '_market_norm', 'side', 'line', 'price', 'p_win', '_ev_per_$1'] if c in pool.columns]
if 'your_parlay' not in st.session_state:
    st.session_state['your_parlay'] = pd.DataFrame()
st.subheader('Your Parlay (pool preview)')
st.dataframe(pool[display_cols].head(1000), hide_index=True, width='stretch')
c1, c2 = st.columns(2)
with c1:
    i_start = st.number_input('Add rows start index', min_value=0, value=0, step=1)
with c2:
    i_stop = st.number_input('Add rows stop index (exclusive)', min_value=1, value=min(legs, len(pool)), step=1)
if st.button('âž• Add to Your Parlay'):
    take = pool.iloc[int(i_start):int(i_stop)].copy()
    if not take.empty:
        st.session_state['your_parlay'] = pd.concat([st.session_state['your_parlay'], take], ignore_index=True)
your = st.session_state['your_parlay'].head(legs).copy()
house = _filter(live).head(legs).copy()
computer = _suggest_computer(_filter(edges), max_legs=legs)
if avoid_same_game and {'_date_iso', '_home_nick', '_away_nick'} <= set(computer.columns):
    computer = computer.drop_duplicates(['_date_iso', '_home_nick', '_away_nick'])

def _card(title: str, df: pd.DataFrame):
    with st.container(border=True):
        st.markdown(f'### {title}')
        if df.empty:
            st.info('No legs.')
            return
        cols = [c for c in ['_date_iso', '_away_nick', '_home_nick', '_market_norm', 'side', 'line', 'price', 'p_win', '_ev_per_$1'] if c in df.columns]
        st.dataframe(df[cols].reset_index(drop=True), hide_index=True, width='stretch')
        if 'price' in df.columns and len(df) > 0:
            dec = _american_to_decimal(df['price']).fillna(1.0)
            parlay_dec = float(np.prod(dec))
            st.caption(f'Implied decimal payout: **{parlay_dec:.2f}x**')
cols = st.columns(3)
with cols[0]:
    _card('Your Parlay', your)
with cols[1]:
    _card('House', house)
with cols[2]:
    _card('Computer', computer)
try:
    import pandas as _ef_pd
    from pathlib import Path as _ef_Path
    _ef = locals().get('diag', None)
    if _ef:
        for _nm in ('edges_p', 'live_p', 'oc_path', 'edges_path', 'live_path', 'scores_path', 'scores_p', 'epath', 'spath', '_lines_p', '_edges_p'):
            _p = locals().get(_nm, None)
            if _p:
                try:
                    _ef.check_file(_ef_Path(str(_p)), required=False, label=_nm)
                except Exception:
                    pass
        for _dfn in ('edges', 'live', 'oc', 'scores', 'joined', 'view'):
            _df = locals().get(_dfn, None)
            try:
                if isinstance(_df, _ef_pd.DataFrame):
                    _ef.log_df(_df, _dfn)
            except Exception:
                pass
except Exception:
    pass
import math as _efmath

def _card(title: str, df):
    st.markdown(f'#### {title}')
    if df is None or (hasattr(df, 'empty') and df.empty):
        st.caption('No picks yet.')
        return
    d = df.copy()
    for c in ('exp_profit', 'ev', 'price', 'prob'):
        if c not in d.columns:
            d[c] = pd.NA
    st.dataframe(d.head(25), width='stretch')
cols = st.columns(3)
with cols[0]:
    _card('Your Parlay', locals().get('user_parlay', None))
with cols[1]:
    _card('House', locals().get('house', None))
with cols[2]:
    _card('Computer', locals().get('computer', None))
import pandas as pd
from app.utils.parlay_cart import read_cart, clear_cart
with st.expander('ðŸ§º Your Cart (staged picks)', expanded=True):
    _cart = read_cart()
    st.caption(f'{len(_cart):,} item(s) in cart')
    if not _cart.empty:
        st.dataframe(_cart, hide_index=True, width='stretch')
        c1, c2 = st.columns([1, 1])
        with c1:
            if st.button('Use cart as Your Parlay', key='use_cart', width='stretch'):
                st.session_state['your_parlay_from_cart'] = _cart.copy()
                st.success('Loaded cart into Your Parlay.')
                st.rerun()
        with c2:
            if st.button('Clear cart', key='clear_cart', width='stretch'):
                clear_cart()
                st.success('Cart cleared.')
                st.rerun()
if 'live' in globals() and isinstance(live, pd.DataFrame) and (not live.empty):
    selectable_odds_table(live, page_key='parlay_live', page_name='05_Parlay_Builder', allow_same_game=False, one_per_market_per_game=True)





