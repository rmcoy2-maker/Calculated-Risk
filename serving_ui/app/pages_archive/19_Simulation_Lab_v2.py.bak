import numpy as np
import pandas as pd
from pathlib import Path
import streamlit as st

from serving_ui.app._layout import header
from app.lib.odds_utils import american_to_decimal, kelly_fraction

header("Simulation Lab (Staking Strategies)")

def _find_edges_csv():
    here = Path(__file__).resolve()
    root = here.parents[2]
    for p in [root/"exports/edges.csv", root/"data_scaffnew/exports/edges.csv"]:
        if p.exists() and p.stat().st_size > 0: return p
    return None

p = _find_edges_csv()
if not p:
    st.warning("edges.csv not found.")
    st.stop()

df = pd.read_csv(p)
df.columns = [c.strip().lower() for c in df.columns]
need = {"odds","model_p"}
if not need.issubset(df.columns):
    st.error("Require columns: odds, model_p")
    st.stop()

st.subheader("Settings")
start_bankroll = st.number_input("Starting bankroll ($)", value=1000.0, min_value=0.0, step=50.0)
ev_floor = st.slider("Min +EV (pp)", -5.0, 20.0, 0.0, 0.5)
cap_pct = st.slider("Stake cap (% bankroll)", 0.5, 20.0, 5.0, 0.5)/100.0
strategies = st.multiselect("Strategies", ["Flat-$", "% Bankroll", "Fractional Kelly (0.5x)"], default=["Flat-$","% Bankroll","Fractional Kelly (0.5x)"])
flat_amt = st.number_input("Flat stake ($)", value=10.0, min_value=0.0, step=1.0)
pct_bank = st.slider("% Bankroll stake", 0.5, 10.0, 2.0, 0.5)/100.0

# Filter by EV
def implied_pp(odds:int)->float:
    dec = 1 + (odds/100.0 if odds>0 else 100.0/abs(odds)); return 1.0/dec
df["ev_pp"] = (df["model_p"] - df["odds"].astype(int).map(implied_pp))*100.0
df = df[df["ev_pp"] >= ev_floor].copy()

df = df.sort_values([c for c in ["ts","season","week"] if c in df.columns]).reset_index(drop=True)

def replay(strategy:str):
    bank = start_bankroll
    curve = []
    for _, r in df.iterrows():
        p = float(r["model_p"]); odds = int(r["odds"]); dec = american_to_decimal(odds)
        if strategy == "Flat-$":
            stake = flat_amt
        elif strategy == "% Bankroll":
            stake = bank * pct_bank
        else:
            stake = bank * min(cap_pct, max(0.0, kelly_fraction(p, odds)*0.5))
        delta = stake*(p*(dec-1.0) - (1.0-p))
        bank += delta; curve.append(bank)
    return curve

st.subheader("Results")
for s in strategies:
    curve = replay(s)
    st.line_chart(curve, height=200)
    st.caption(f"{s}: end=${curve[-1]:,.2f}")





