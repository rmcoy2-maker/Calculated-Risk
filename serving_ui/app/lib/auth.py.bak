
# serving_ui/app/lib/auth.py
from __future__ import annotations
from types import SimpleNamespace
import streamlit as st

# ---------------- Core API ----------------
def login(*, required: bool = True, title: str = "Sign in") -> SimpleNamespace:
    """
    Lightweight auth shim used by all pages.
    - required=False  -> auto-auth to a read-only 'beta' user (no UI).
    - required=True   -> simple username/password in the sidebar.
    Returns an object with .ok, .user, .role.
    """
    # already logged in?
    state = st.session_state.get("_auth_state")
    if state and state.get("ok"):
        return SimpleNamespace(**state)

    # Beta/preview mode for public pages
    if not required:
        state = {"ok": True, "user": "beta", "role": "viewer"}
        st.session_state["_auth_state"] = state
        _mount_logout()  # show logout button anyway
        return SimpleNamespace(**state)

    # Required auth: very simple form; uses st.secrets if present, else dev fallback
    with st.sidebar:
        st.subheader(title)
        u = st.text_input("Username", key="_auth_user")
        p = st.text_input("Password", type="password", key="_auth_pass")
        go = st.button("Sign in", key="_auth_go")

    # Expected secrets format (either works):
    # st.secrets["auth"]["users"] = {"alice": "plaintext", "bob": "plaintext"}
    # or st.secrets["users"] = {"alice": "plaintext", "bob": "plaintext"}
    users = {}
    try:
        if "auth" in st.secrets and isinstance(st.secrets["auth"], dict):
            users = dict(st.secrets["auth"].get("users", {}))
        elif "users" in st.secrets and isinstance(st.secrets["users"], dict):
            users = dict(st.secrets["users"])
    except Exception:
        users = {}

    if go:
        if users:
            valid = (u in users) and (p == str(users[u]))
        else:
            # Dev fallback: allow any credentials if no secrets configured
            st.warning("No users found in st.secrets â€” allowing dev login.")
            valid = True

        if valid:
            state = {"ok": True, "user": u or "dev", "role": "admin"}
            st.session_state["_auth_state"] = state
            _mount_logout()
            st.rerun()
        else:
            st.error("Invalid username or password.")

    _mount_logout()
    return SimpleNamespace(**(st.session_state.get("_auth_state", {"ok": False, "user": None, "role": None})))


def show_logout() -> None:
    """Public logout helper (kept for backward compatibility)."""
    _mount_logout()


# --------------- Sidebar controls ---------------
def _mount_logout():
    with st.sidebar:
        if st.session_state.get("_auth_state", {}).get("ok"):
            if st.button("Log out", key="_auth_logout"):
                st.session_state.pop("_auth_state", None)
                st.rerun()
