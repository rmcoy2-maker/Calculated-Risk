from __future__ import annotations
import streamlit as st
from app.lib.auth import login, show_logout
import streamlit as st
from app.lib.auth import login, show_logout
auth = login(required=False)
if not auth.authenticated:
    st.info('You are in read-only mode.')
show_logout()
from __future__ import annotations
import sys
from pathlib import Path
_HERE = Path(__file__).resolve()
_SERVING_UI = _HERE.parents[2]
if str(_SERVING_UI) not in sys.path:
    sys.path.insert(0, str(_SERVING_UI))
import io
from textwrap import dedent
import streamlit as st
try:
    from app.utils.diagnostics import mount_in_sidebar
except Exception:

    def mount_in_sidebar(_: str | None=None):
        return None
st.set_page_config(page_title='02 User manual', page_icon='üìò', layout='wide')
mount_in_sidebar('02_User_manual')

def md(s: str):
    st.markdown(dedent(s), unsafe_allow_html=False)

def make_pdf_from_markdown(md_text: str) -> bytes | None:
    """Very simple PDF generation; install reportlab to enable."""
    try:
        from reportlab.lib.pagesizes import LETTER
        from reportlab.pdfgen import canvas
        from reportlab.lib.units import inch
    except Exception:
        return None
    buf = io.BytesIO()
    c = canvas.Canvas(buf, pagesize=LETTER)
    width, height = LETTER
    left = 0.9 * inch
    top = height - 0.9 * inch
    line_height = 12
    max_chars = 95

    def draw_paragraph(text: str, y: float) -> float:
        for para_line in text.splitlines():
            line = para_line
            while len(line) > max_chars:
                c.drawString(left, y, line[:max_chars])
                y -= line_height
                line = line[max_chars:]
                if y < 0.9 * inch:
                    c.showPage()
                    y = height - 0.9 * inch
            c.drawString(left, y, line)
            y -= line_height
            if y < 0.9 * inch:
                c.showPage()
                y = height - 0.9 * inch
        y -= line_height
        if y < 0.9 * inch:
            c.showPage()
            y = height - 0.9 * inch
        return y
    c.setFont('Helvetica-Bold', 16)
    c.drawString(left, top, 'Edge Finder ‚Äî User Manual')
    y = top - 24
    c.setFont('Helvetica', 10)
    y = draw_paragraph(MANUAL_MD, y)
    c.showPage()
    c.save()
    buf.seek(0)
    return buf.read()
_MANUAL_LINES = ['# Edge Finder ‚Äî User Manual', '', 'Edge Finder is a Streamlit toolkit for exploring betting opportunities, building/optimizing parlays, tracking wagers, and evaluating strategy over time. It reads CSV exports generated by your ETL pipeline and presents interactive pages to filter, optimize, record, and review bets.', '', '---', '', '## 1) Quick Start', '', '1. **Update data** via your ETL:', '   - `pull_stats.py`', '   - `pull_lines.py`', '2. **Verify exports exist** in `exports/`:', '   - `edges_graded_full.csv` (or normalized variant)', '   - `lines_live.csv`, `scores_*.csv`', '   - `bets_log.csv`', '3. **Launch the app**', '```bash', 'streamlit run serving_ui/app/Home.py --server.port 8501', '```', '', '---', '', '## 2) Pages Overview', '', '- **Data Diagnostics** ‚Äî Validates presence/shape of exports.', '- **All Picks Explorer** ‚Äî Filter by league/market/edge thresholds.', '- **Lines ‚Äî Explorer** ‚Äî Inspect open/close vs live lines by date/market/book.', '- **Backtest ‚Äî Scores Browser** ‚Äî Join edges ‚Üî scores; compute results.', '- **Parlay Builder** ‚Äî Build legs; compute EV & payouts; save tickets.', '- **Parlay Scored Explorer** ‚Äî Review settled legs and tickets.', '- **Micro Calculations ‚Äî Locks & Moonshots** ‚Äî Quick EV-positive singles and simple moonshot checks.', '- **Settled** ‚Äî Reconciled results and summaries.', '- **User Manual** ‚Äî This page.', '', '---', '', '## 3) Files & Folders', '', '- **Project root**: `C:\\Projects\\edge-finder\\`', '- **Exports**: `exports\\` ‚Äî primary CSV outputs consumed by the app', '  - `edges_graded_full*.csv`', '  - `lines_live.csv`', '  - `scores_*.csv`', '  - `bets_log.csv`', '- **App**: `serving_ui\\app\\`', '  - `Home.py`', '  - `pages\\` ‚Äî individual Streamlit pages', '  - `utils\\` ‚Äî utilities (diagnostics, parlay_ui)', '  - `lib\\` ‚Äî core helpers (io_paths, settlement, etc.)', '', '---', '', '## 4) Math Explainer ‚Äî odds, probability, and EV', '', '### Decimal vs American odds', '- **Decimal** odds `d`: payout per $1 staked *including* stake.  ', '  Example: `d = 2.50` ‚Üí win returns $2.50; profit = $1.50.', '- **American** odds `A`:', '  - `A > 0` (underdog): `d = 1 + A/100`  (e.g., +150 ‚Üí 2.50)', '  - `A < 0` (favorite): `d = 1 + 100/|A|` (e.g., ‚àí200 ‚Üí 1.50)', '', '### Implied probability', '- From decimal: `p_implied = 1 / d`', '- From American: convert to decimal first (above), then `1/d`.', '', '### Expected value (EV) per $1 stake (single-leg)', '- `EV = p * (d ‚àí 1) ‚àí (1 ‚àí p)`', '  - `p` = your model‚Äôs win probability', '  - `d` = decimal odds', '  - Interpretation: positive EV means the average profit per $1 is positive over the long run.', '', '### Parlays', '- **Parlay decimal odds**: multiply legs ‚Üí `d_parlay = ‚àè d_i`', '- **Parlay win probability** (assuming independence as a simplification): `p_parlay = ‚àè p_i`', '- **Parlay EV per $1**: `EV_parlay = p_parlay * (d_parlay ‚àí 1) ‚àí (1 ‚àí p_parlay)`', '', '> Notes:', '> - Real legs are not fully independent (same-game correlations). Treat parlay EV as a *directional* estimate unless you explicitly model correlation.', '> - If you only have book odds (no model probability), `p = 1/d` describes the *break-even* probability under fair odds. Edge comes from `p_model ‚àí 1/d`.', '', '---', '', '## 5) Common Pitfalls', '', '- **‚ÄúImportError: numpy from source directory‚Äù**  ', '  Usually a chained error; fix the first SyntaxError on the failing page.', '- **Missing exports**  ', '  Diagnostics page shows exactly what‚Äôs missing.', '- **CSV encoding**  ', '  Save as UTF-8 (with BOM if opening in Excel on Windows).', '', '---', '', '## 6) Quick Recipes', '', '### Normalize Edges for Settlement', '```python', '# example only; adapt to your repo structure', 'from tools.lib_settle_normalize import normalize_edges_for_settlement', 'edges_norm = normalize_edges_for_settlement(edges, lines_live=live)', 'edges_norm.to_csv("exports/edges_graded_full_normalized.csv", index=False, encoding="utf-8-sig")', '```', '', '### Launch on a Free Port (Windows, PowerShell)', '```powershell', '$env:EDGE_SOURCE_FILE="C:\\Projects\\edge-finder\\exports\\edges_graded_full.csv"', 'python -m streamlit run serving_ui/app/Home.py --server.port 8501', '```', '', '---', '', '## 7) Support', 'If a page throws an error, open **Error Dashboard** or copy/paste the traceback with the page name and line number.']
MANUAL_MD = '\n'.join(_MANUAL_LINES)
st.title('üìò Edge Finder ‚Äî User Manual')
with st.expander('View Manual', expanded=True):
    md(MANUAL_MD)
col1, col2 = st.columns(2)
with col1:
    st.download_button('Download as Markdown (.md)', MANUAL_MD.encode('utf-8'), file_name='edge_finder_user_manual.md', mime='text/markdown', width='stretch')
with col2:
    pdf_bytes = make_pdf_from_markdown(MANUAL_MD)
    if pdf_bytes:
        st.download_button('Download as PDF (.pdf)', pdf_bytes, file_name='edge_finder_user_manual.pdf', mime='application/pdf', width='stretch')
    else:
        st.caption('Install `reportlab` to enable PDF export.')
