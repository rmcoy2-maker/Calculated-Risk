from __future__ import annotations
import streamlit as st
from app.lib.auth import login, show_logout
# === Auth (auto-injected) ===
import streamlit as st  # ensured
from app.lib.auth import login, show_logout

auth = login(required=False)   # or required=True for protected pages
if not auth.authenticated:
    st.info("You are in read-only mode.")
show_logout()  # sidebar logout
# === /Auth (auto-injected) ===
from __future__ import annotations
import streamlit as st
# --- import bootstrap so 'app' package is importable when run from anywhere ---
import sys
from pathlib import Path
_HERE = Path(__file__).resolve()
# file: .../serving_ui/app/pages/<page>.py  -> parents[2] = .../serving_ui
_SERVING_UI = _HERE.parents[2]
if str(_SERVING_UI) not in sys.path:
    sys.path.insert(0, str(_SERVING_UI))
# -----------------------------------------------------------------------------import streamlit as st
st.set_page_config(page_title='96 Data Diagnostics', page_icon='ðŸ“ˆ', layout='wide')

import streamlit as st

import streamlit as st


import streamlit as st

import pandas as pd
import streamlit as st
from lib.io_paths import load_edges, load_scores
from lib.join_scores import attach_scores
# --- diagnostics import (robust) ---
try:
    from app.utils.diagnostics import mount_in_sidebar
except ModuleNotFoundError:
    try:
        import sys
        from pathlib import Path as _efP
        # add repo/serving_ui to sys.path so 'app' is importable
        sys.path.append(str(_efP(__file__).resolve().parents[3]))
        from app.utils.diagnostics import mount_in_sidebar
    except Exception:
        try:
            # fallback if pages run with CWD=app
            from utils.diagnostics import mount_in_sidebar
        except Exception:
            def mount_in_sidebar(page_name: str):
                return None
# --- /diagnostics import (robust) ---

st.title("Data Diagnostics â€” Date Alignment & Join")

edges = load_edges()
scores = load_scores()
# Coerce types consistently
for df in (edges, scores):
    for c in ["Season","Week"]:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors="coerce").astype("Int64")
joined = attach_scores(edges.assign(HomeScore=pd.NA, AwayScore=pd.NA).copy(), scores.copy())

st.metric("Edges", len(edges))
st.metric("Scores", len(scores))
st.metric("Joined (has scores)", int(joined.get("_joined_with_scores", pd.Series([False]*len(joined))).sum()))

with st.expander("Join methods breakdown", expanded=False):
    if "_join_method" in joined.columns:
        st.dataframe(joined["_join_method"].value_counts(dropna=False))
    else:
        st.write("No _join_method column in joined.")








