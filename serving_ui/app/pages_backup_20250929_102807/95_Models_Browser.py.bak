from __future__ import annotations
import streamlit as st
from app.lib.auth import login, show_logout
# === Auth (auto-injected) ===
import streamlit as st  # ensured
from app.lib.auth import login, show_logout

auth = login(required=False)   # or required=True for protected pages
if not auth.authenticated:
    st.info("You are in read-only mode.")
show_logout()  # sidebar logout
# === /Auth (auto-injected) ===
from __future__ import annotations
import streamlit as st
# --- import bootstrap so 'app' package is importable when run from anywhere ---
import sys
from pathlib import Path
_HERE = Path(__file__).resolve()
# file: .../serving_ui/app/pages/<page>.py  -> parents[2] = .../serving_ui
_SERVING_UI = _HERE.parents[2]
if str(_SERVING_UI) not in sys.path:
    sys.path.insert(0, str(_SERVING_UI))
from app.lib.access import live_enabled

if live_enabled():
    # do live fetch / recompute / write / API calls
    do_expensive_refresh()
else:
    # skip; rely on cached CSVs in /exports that your app already loads
    pass

# -----------------------------------------------------------------------------
import streamlit as st
st.set_page_config(page_title='95 Models Browser', page_icon='ðŸ“ˆ', layout='wide')

import streamlit as st

import streamlit as st


import streamlit as st

import streamlit as st
# --- diagnostics import (robust) ---
try:
    from app.utils.diagnostics import mount_in_sidebar
except ModuleNotFoundError:
    try:
        import sys
        from pathlib import Path as _efP
        # add repo/serving_ui to sys.path so 'app' is importable
        sys.path.append(str(_efP(__file__).resolve().parents[3]))
        from app.utils.diagnostics import mount_in_sidebar
    except Exception:
        try:
            # fallback if pages run with CWD=app
            from utils.diagnostics import mount_in_sidebar
        except Exception:
            def mount_in_sidebar(page_name: str):
                return None
# --- /diagnostics import (robust) ---
try:
    pass
except Exception:
    pass
st.markdown("""
<style>
  .block-container { max-width: none !important; padding-left: 1rem; padding-right: 1rem; }
  [data-testid="stHeader"] { z-index: 9990; }
</style>
""", unsafe_allow_html=True)
# --- auto-added: newest-first patch ---

try:
    # Preferred absolute import (when 'app' is a proper package)
    from app.utils.newest_first_patch import apply_newest_first_patch as __nfp_apply
except Exception:
    try:
        # Fallback if pages are executed such that relative path works
        from utils.newest_first_patch import apply_newest_first_patch as __nfp_apply
    except Exception:
        # Final no-op guard
        def __nfp_apply(_): 
            return
import streamlit as st  # ensure alias available
__nfp_apply(st)
# --- end auto-added ---
# --- robust bootstrap so `import app.*` works no matter where we run from ---
from pathlib import Path
import sys
HERE = Path(__file__).resolve()
APP_DIR = HERE.parents[1]          # .../serving_ui/app
PKG_PARENT = APP_DIR.parent        # .../serving_ui
REPO = PKG_PARENT.parent           # .../edge-finder

for p in (str(PKG_PARENT), str(REPO)):
    if p not in sys.path:
        sys.path.insert(0, p)

# Try to use the project's bootstrap if available
try:
    from app.bootstrap import bootstrap_paths  # optional
    bootstrap_paths()
except Exception:
    pass

# --- primary imports with graceful fallbacks ---
import streamlit as st
from pathlib import Path as _P_OVERRIDE
REPO = _P_OVERRIDE(r"C:\Projects\edge-finder")
import pandas as pd

# Registry: try real one, else tiny file-based fallback
try:
    from app.lib.registry import current_model_version  # real
except Exception:
    def current_model_version(default: str = "0.0.0-dev") -> str:
        marker = REPO / "exports" / "models" / "ACTIVE.txt"
        if marker.exists():
            try:
                return marker.read_text(encoding="utf-8").strip() or default
            except Exception:
                return default
        return default

# Models: try real one, else lightweight local scan
try:
    from app.lib.models import find_models, set_active_model  # real
except Exception:
    def _scan_model_dirs():
        bases = [
            REPO / "models",
            REPO / "exports" / "models",
            REPO / "artifacts" / "models",
        ]
        for base in bases:
            if base.exists():
                yield base

    def find_models():
        out = []
        for base in _scan_model_dirs():
            for p in base.glob("*"):
                if p.is_dir():
                    # Simple metadata sniff
                    name = p.name
                    version = name
                    updated = pd.to_datetime(p.stat().st_mtime, unit="s").isoformat()
                    notes = ""
                    for meta_name in ("model.json", "metadata.json", "meta.json"):
                        m = p / meta_name
                        if m.exists():
                            try:
                                js = pd.read_json(m)
                                name = str(js.get("name", name))
                                version = str(js.get("version", version))
                                notes = str(js.get("notes", notes))
                                break
                            except Exception:
                                pass
                    out.append({"name": name, "version": version, "updated": updated, "notes": notes, "path": str(p)})
        # stable sort by name then updated desc
        return sorted(out, key=lambda d: (d["name"].lower(), d["updated"]), reverse=False)

    def set_active_model(version: str):
        marker = REPO / "exports" / "models"
        marker.mkdir(parents=True, exist_ok=True)
        (marker / "ACTIVE.txt").write_text(version, encoding="utf-8")

# --- page header ---
st.title("ðŸ§  Models Browser")

cur = current_model_version()
st.caption(f"Current model version: **{cur}**")

models = find_models()
if not models:
    st.warning(
        "No models found. Add models under `models/`, `exports/models/`, or `artifacts/models/`.\n"
        "Optional metadata: `model.json`, `metadata.json`, or `meta.json` with `name`, `version`, `updated`, `notes`."
    )
    st.stop()

df = pd.DataFrame(models, columns=["name","version","updated","notes","path"])
st.dataframe(df, use_container_width=True, hide_index=True)

st.subheader("Activate")
col1, col2 = st.columns([2,1])
with col1:
    choices = [f"{m['name']}  â€”  {m['version']}" for m in models]
    try:
        default_idx = next(i for i,m in enumerate(models) if m["version"] == cur)
    except StopIteration:
        default_idx = 0
    picked = st.selectbox("Select a model to activate", choices, index=default_idx)
with col2:
    if st.button("Set Active", type="primary"):
        sel_idx = choices.index(picked)
        ver = models[sel_idx]["version"]
        set_active_model(ver)
        st.success(f"Set active model to: {ver}")

with st.expander("ðŸ”Ž Inspect selected model files"):
    sel_idx = choices.index(picked)
    p = Path(models[sel_idx]["path"])
    files = [f for f in p.rglob("*") if f.is_file()]
    if not files:
        st.info("No files under this model fnewer.")
    else:
        table = pd.DataFrame({
            "relpath": [str(f.relative_to(p)) for f in files],
            "size_kb": [round(f.stat().st_size/1024,2) for f in files]
        }).sort_values("relpath")
        st.dataframe(table, use_container_width=True, hide_index=True)




















