from __future__ import annotations
import streamlit as st
from app.lib.auth import login, show_logout
# === Auth (auto-injected) ===
import streamlit as st  # ensured
from app.lib.auth import login, show_logout

auth = login(required=False)   # or required=True for protected pages
if not auth.authenticated:
    st.info("You are in read-only mode.")
show_logout()  # sidebar logout
# === /Auth (auto-injected) ===
# -*- coding: utf-8 -*-
from __future__ import annotations

# --- import bootstrap so 'app' package is importable when run from anywhere ---
import sys, os
from pathlib import Path
_HERE = Path(__file__).resolve()
_SERVING_UI = _HERE.parents[2]  # .../serving_ui
if str(_SERVING_UI) not in sys.path:
    sys.path.insert(0, str(_SERVING_UI))
# -----------------------------------------------------------------------------

import streamlit as st
from collections.abc import Mapping

# Optional diagnostics sidebar
try:
    from app.utils.diagnostics import mount_in_sidebar
except Exception:
    def mount_in_sidebar(_: str | None = None):  # fallback no-op
        return None

# bcrypt (pip install bcrypt)
try:
    import bcrypt
except Exception:
    bcrypt = None

# Debug helper to peek at loaded usernames without exposing secrets content
if os.environ.get("EDGE_DEBUG_SECRETS") == "1":
    try:
        u = st.secrets.get("credentials", {}).get("usernames", {})
        st.info(f"usernames visible in secrets: {list(getattr(u,'keys',lambda:[])())}")
    except Exception as e:
        st.warning(f"secrets parse error: {e}")

st.set_page_config(page_title="00 Login", page_icon="üìà", layout="wide")
mount_in_sidebar("00_Login")

# -------------------- CONFIG --------------------
# Quick dev bypass:
#   set EDGE_DEV_NO_AUTH=1 (or auth_mode=OFF in secrets) to skip login
DEV_BYPASS = os.environ.get("EDGE_DEV_NO_AUTH", "") == "1"
if not DEV_BYPASS:
    try:
        DEV_BYPASS = str(st.secrets.get("auth_mode", "")).strip().upper() in {"OFF", "DISABLED", "BYPASS"}
    except Exception as e:
        st.warning(f"Secrets parse error: {e}. Set EDGE_DEV_NO_AUTH=1 to bypass temporarily.")

# -------------------- HELPERS --------------------
def _read_credentials() -> dict[str, dict]:
    """
    Expected secrets structure:

      auth_mode = "ON"

      [credentials.usernames.<username>]
      name = "..."
      email = "..."
      password = "<bcrypt hash>"
      role = "admin" | "guest" | "user"
    """
    from collections.abc import Mapping

    creds_root = st.secrets.get("credentials", {})
    users = {}
    if isinstance(creds_root, Mapping):
        users = creds_root.get("usernames", {}) or {}
    else:
        try:
            users = dict(creds_root).get("usernames", {}) or {}
        except Exception:
            users = {}

    out: dict[str, dict] = {}
    it = users.items() if isinstance(users, Mapping) else []
    for uname, blob in it:
        if not isinstance(blob, Mapping):
            try:
                blob = dict(blob)
            except Exception:
                continue
        out[str(uname)] = {
            "name":     (blob.get("name") or str(uname)),
            "email":    blob.get("email", ""),
            "password": str(blob.get("password", "")),
            "role":     blob.get("role", "user"),
        }
    return out

def _check_password(stored_hash: str, raw_pw: str) -> bool:
    if not stored_hash or not raw_pw:
        return False
    if bcrypt is None:
        st.error("bcrypt is not installed. In your venv run:  pip install bcrypt")
        return False
    try:
        return bcrypt.checkpw(raw_pw.encode("utf-8"), stored_hash.encode("utf-8"))
    except Exception:
        return False

def _login_ui():
    st.title("üîê Sign in to Edge Finder")

    # Already authenticated?
    auth = st.session_state.get("auth", {"authenticated": False})
    if auth.get("authenticated"):
        st.success(f"Welcome, {auth.get('name')} ({auth.get('role')})!")
        st.page_link("Home.py", label="Go to Home", icon="üè†")
        st.divider()
        if st.button("Log out"):
            st.session_state.pop("auth", None)
            st.rerun()
        return

    # Dev bypass?
    if DEV_BYPASS:
        st.info("Auth bypass is enabled (DEV).")
        st.session_state["auth"] = {
            "authenticated": True,
            "username": "admin",
            "name": "Developer",
            "email": "",
            "role": "admin",
        }
        st.rerun()
        return

    # Normal login form
    creds = _read_credentials()
    if not creds:
        st.error("No credentials found in secrets. Add a user under [credentials.usernames.<username>].")
        with st.expander("Example secrets.toml entry", expanded=False):
            st.code(
                """auth_mode = "ON"

[credentials.usernames.murphey]
name = "Murphey Coy"
email = "rmcoy2y@gmail.com"
password = "$2b$12$9eoQypxuzyrOwwErAel4VOl5HgoEgCUj5u8YIhIelKnlWkyJ6iWau"  # bcrypt hash for 'bet247'
role = "admin"

[credentials.usernames.tester]
name = "Guest"
email = ""
password = "$2b$12$uNiAG1j3QkaBnT2LzeSjYOy7fWxT47.OyJEW5/Z./JE8h5V0h0gPS"  # bcrypt for '_guest'
role = "guest"
""",
                language="toml",
            )
        with st.expander("Generate a bcrypt hash (PowerShell)", expanded=False):
            st.code(
                r""".\.venv\Scripts\python.exe -c "import bcrypt, getpass; pw=getpass.getpass('New password: '); print(bcrypt.hashpw(pw.encode(), bcrypt.gensalt()).decode())" """,
                language="powershell",
            )
        return

    st.caption("Enter your username and password to continue.")
    u = st.text_input("Username", key="login_username")
    p = st.text_input("Password", type="password", key="login_password")

    colA, colB = st.columns([1, 1])
    with colA:
        submit = st.button("Sign in", type="primary")
    with colB:
        guest = st.button("Continue as guest (no password)")

    if submit:
        rec = creds.get(u.strip()) if u else None
        if not rec:
            st.error("Unknown username.")
            return
        if not _check_password(rec.get("password", ""), p):
            st.error("Incorrect password.")
            return
        # success
        st.session_state["auth"] = {
            "authenticated": True,
            "username": u,
            "name": rec.get("name") or u,
            "email": rec.get("email", ""),
            "role": rec.get("role", "user"),
        }
        st.rerun()

    if guest:
        st.session_state["auth"] = {
            "authenticated": True,
            "username": "guest",
            "name": "Guest",
            "email": "",
            "role": "guest",
        }
        st.rerun()

# -------------------- ENTRY --------------------
_login_ui()



